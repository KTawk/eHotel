/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-05-09 18:08:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class manageRooms_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/admin-navbar.html", Long.valueOf(1746813715680L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Manage Rooms</title>\n");
      out.write("    <style>\n");
      out.write("        body { font-family: Arial, sans-serif; padding: 20px; background: #f9f9f9; }\n");
      out.write("        h2 { color: #333; }\n");
      out.write("        .nav { background: #eaf7ea; padding: 10px; margin-bottom: 20px; border-radius: 5px; }\n");
      out.write("        .nav a { margin-right: 15px; color: #0a0a0a; font-weight: bold; text-decoration: none; }\n");
      out.write("        .card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); margin-bottom: 30px; }\n");
      out.write("        label { display: inline-block; width: 120px; margin-bottom: 10px; }\n");
      out.write("        input[type=\"text\"] { width: 250px; padding: 6px; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 10px; }\n");
      out.write("        input[type=\"submit\"], button { background: #0a0a0a; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; }\n");
      out.write("        input[type=\"submit\"]:hover, button:hover { background: #0a0a0a; }\n");
      out.write("        table { width: 100%; border-collapse: collapse; background: white; border-radius: 5px; overflow: hidden; }\n");
      out.write("        th, td { padding: 10px; border-bottom: 1px solid #ddd; text-align: left; }\n");
      out.write("        th { background-color: #f2f2f2; }\n");
      out.write("        tr:hover { background-color: #f1f1f1; }\n");
      out.write("        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); justify-content: center; align-items: center; }\n");
      out.write("        .modal-content { background: white; padding: 20px; border-radius: 5px; width: 400px; }\n");
      out.write("        .close { float: right; cursor: pointer; color: red; font-weight: bold; }\n");
      out.write("    </style>\n");
      out.write("    <script>\n");
      out.write("        function openEditModal(id, hotel, num, capacity, damages, price) {\n");
      out.write("            document.getElementById(\"editId\").value = id;\n");
      out.write("            document.getElementById(\"editHotel\").value = hotel;\n");
      out.write("            document.getElementById(\"editNum\").value = num;\n");
      out.write("            document.getElementById(\"editCapacity\").value = capacity;\n");
      out.write("            document.getElementById(\"editDamages\").value = damages;\n");
      out.write("            document.getElementById(\"editPrice\").value = price;\n");
      out.write("            document.getElementById(\"editModal\").style.display = \"flex\";\n");
      out.write("        }\n");
      out.write("        function closeModal() {\n");
      out.write("            document.getElementById(\"editModal\").style.display = \"none\";\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Navbar</title>\n");
      out.write("    <style>\n");
      out.write("        body {\n");
      out.write("            margin: 0;\n");
      out.write("            font-family: 'Helvetica Neue', sans-serif;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar {\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: space-between;\n");
      out.write("            align-items: center;\n");
      out.write("            background-color: #222;\n");
      out.write("            padding: 1rem 2rem;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar .logo {\n");
      out.write("            color: #fff;\n");
      out.write("            font-size: 20px;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar ul {\n");
      out.write("            list-style: none;\n");
      out.write("            display: flex;\n");
      out.write("            gap: 1.5rem;\n");
      out.write("            margin: 0;\n");
      out.write("            padding: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar ul li a {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: none;\n");
      out.write("            transition: color 0.3s;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar ul li a:hover {\n");
      out.write("            color: #f0a500;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .navbar .logo a {\n");
      out.write("            color: #fff;\n");
      out.write("            text-decoration: none;\n");
      out.write("            font-size: 1.5rem;\n");
      out.write("            font-weight: bold;\n");
      out.write("        }\n");
      out.write("        .navbar .logo a:hover {\n");
      out.write("            color: #f0a500;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<nav class=\"navbar\">\n");
      out.write("    <div class=\"logo\">\n");
      out.write("        <a href=\"index.jsp\">VELVET NIGHTS</a>\n");
      out.write("    </div>\n");
      out.write("    <ul>\n");
      out.write("        <li><a href=\"manageCustomers.jsp\">Manage Customers</a></li>\n");
      out.write("        <li><a href=\"manageEmployees.jsp\">Manage Employees</a></li>\n");
      out.write("        <li><a href=\"manageHotels.jsp\">Manage Hotels</a></li>\n");
      out.write("        <li><a href=\"manageRooms.jsp\">Manage Rooms</a></li>\n");
      out.write("    </ul>\n");
      out.write("</nav>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("<h2>Manage Rooms</h2>\n");
      out.write("\n");
      out.write("<!-- INSERT ROOM -->\n");
      out.write("<div class=\"card\">\n");
      out.write("    <h3>Insert Room</h3>\n");
      out.write("    <form method=\"post\">\n");
      out.write("        <label>Hotel ID:</label><input type=\"text\" name=\"insert_hotel\" required><br>\n");
      out.write("        <label>Room Number:</label><input type=\"text\" name=\"insert_num\" required><br>\n");
      out.write("        <label>Capacity:</label><input type=\"text\" name=\"insert_capacity\" required><br>\n");
      out.write("        <label>Damages:</label><input type=\"text\" name=\"insert_damages\"><br>\n");
      out.write("        <label>Price:</label><input type=\"text\" name=\"insert_price\" required><br>\n");
      out.write("        <input type=\"submit\" name=\"action\" value=\"Insert\">\n");
      out.write("    </form>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- Display All Rooms -->\n");
      out.write("<table>\n");
      out.write("    <tr>\n");
      out.write("        <th>Room ID</th><th>Hotel ID</th><th>Room #</th><th>Capacity</th><th>Damages</th><th>Price</th><th>Actions</th>\n");
      out.write("    </tr>\n");
      out.write("    ");

        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/e_hotel_system", "postgres", "password");
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT * FROM rooms");
            while (rs.next()) {
                String id = rs.getString("room_id");
                String hotel = rs.getString("hotel_id");
                String num = rs.getString("room_num");
                String capacity = rs.getString("capacity");
                String damages = rs.getString("damages");
                String price = rs.getString("price");
    
      out.write("\n");
      out.write("    <tr>\n");
      out.write("        <td>");
      out.print( id );
      out.write("</td>\n");
      out.write("        <td>");
      out.print( hotel );
      out.write("</td>\n");
      out.write("        <td>");
      out.print( num );
      out.write("</td>\n");
      out.write("        <td>");
      out.print( capacity );
      out.write("</td>\n");
      out.write("        <td>");
      out.print( damages );
      out.write("</td>\n");
      out.write("        <td>");
      out.print( price );
      out.write("</td>\n");
      out.write("        <td>\n");
      out.write("            <button onclick=\"openEditModal('");
      out.print( id );
      out.write("', '");
      out.print( hotel );
      out.write("', '");
      out.print( num );
      out.write("', '");
      out.print( capacity );
      out.write("', '");
      out.print( damages );
      out.write("', '");
      out.print( price );
      out.write("')\">Edit</button>\n");
      out.write("            <form method=\"post\" style=\"display:inline;\">\n");
      out.write("                <input type=\"hidden\" name=\"delete_id\" value=\"");
      out.print( id );
      out.write("\">\n");
      out.write("                <input type=\"submit\" name=\"action\" value=\"Delete\" onclick=\"return confirm('Are you sure you want to delete this room?');\">\n");
      out.write("            </form>\n");
      out.write("        </td>\n");
      out.write("    </tr>\n");
      out.write("    ");

            }
        } catch (Exception e) {
            out.println("<tr><td colspan='7'>Error loading rooms: " + e.getMessage() + "</td></tr>");
        } finally {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("<!-- Edit Modal -->\n");
      out.write("<div id=\"editModal\" class=\"modal\">\n");
      out.write("    <div class=\"modal-content\">\n");
      out.write("        <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n");
      out.write("        <h3>Edit Room</h3>\n");
      out.write("        <form method=\"post\">\n");
      out.write("            <input type=\"hidden\" id=\"editId\" name=\"update_id\">\n");
      out.write("            <label>Hotel ID:</label><input type=\"text\" id=\"editHotel\" name=\"update_hotel\"><br>\n");
      out.write("            <label>Room Number:</label><input type=\"text\" id=\"editNum\" name=\"update_num\"><br>\n");
      out.write("            <label>Capacity:</label><input type=\"text\" id=\"editCapacity\" name=\"update_capacity\"><br>\n");
      out.write("            <label>Damages:</label><input type=\"text\" id=\"editDamages\" name=\"update_damages\"><br>\n");
      out.write("            <label>Price:</label><input type=\"text\" id=\"editPrice\" name=\"update_price\"><br>\n");
      out.write("            <input type=\"submit\" name=\"action\" value=\"Update\">\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");

    String action = request.getParameter("action");
    Connection db = null;
    PreparedStatement ps = null;

    try {
        if (action != null) {
            Class.forName("org.postgresql.Driver");
            db = DriverManager.getConnection("jdbc:postgresql://localhost:5432/e_hotel_system", "postgres", "password");

            if (action.equals("Insert")) {
                String sql = "INSERT INTO rooms (hotel_id, room_num, capacity, damages, price, extendable, tv, ac, microwave, fridge, kitchen) VALUES (?, ?, ?, ?, ?, false, false, false, false, false, false)";
                ps = db.prepareStatement(sql);
                ps.setString(1, request.getParameter("insert_hotel"));
                ps.setString(2, request.getParameter("insert_num"));
                ps.setString(3, request.getParameter("insert_capacity"));
                ps.setString(4, request.getParameter("insert_damages"));
                ps.setString(5, request.getParameter("insert_price"));
                ps.executeUpdate();
                out.println("<p style='color:green;'>Room inserted successfully.</p>");
            }

            if (action.equals("Update")) {
                String sql = "UPDATE rooms SET hotel_id=?::int, room_num=?::int, capacity=?::int, damages=?, price=?::numeric WHERE room_id=?::int";

                ps = db.prepareStatement(sql);
                ps.setString(1, request.getParameter("update_hotel"));
                ps.setString(2, request.getParameter("update_num"));
                ps.setString(3, request.getParameter("update_capacity"));
                ps.setString(4, request.getParameter("update_damages"));
                ps.setString(5, request.getParameter("update_price"));
                ps.setString(6, request.getParameter("update_id"));
                ps.executeUpdate();
                out.println("<p style='color:green;'>Room updated successfully.</p>");
            }

            if (action.equals("Delete")) {
                String sql = "DELETE FROM rooms WHERE room_id=?::int";
                ps = db.prepareStatement(sql);
                ps.setString(1, request.getParameter("delete_id"));
                ps.executeUpdate();
                out.println("<p style='color:green;'>Room deleted successfully.</p>");
            }
        }
    } catch (Exception e) {
        out.println("<p style='color:red;'>Error: " + e.getMessage() + "</p>");
    } finally {
        if (ps != null) ps.close();
        if (db != null) db.close();
    }

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
